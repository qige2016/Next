//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Bright.Config;
using Bright.Serialization;
using SimpleJSON;


namespace Next.Core.Bean
{ 
   
public sealed partial class Tables
{
    private readonly Dictionary<string, object> _tables = new Dictionary<string, object>();

    public Tables()
    {
    }

    public ITable<TBean, TKey> GetTable<TBean, TKey>(Func<string, JSONNode> loader) where TBean : BeanBase
    {
        var _type = typeof(TBean);
        if(_type == typeof(ItemBean))
        {
            var _table = new TbItem(loader("tbitem"));
            _tables.Add("ItemBean", _table);
            PostInit();
            _table.Resolve(_tables);
            PostResolve();
            return _table as ITable<TBean, TKey>;
        }
        if(_type == typeof(RoleBean))
        {
            var _table = new TbRole(loader("tbrole"));
            _tables.Add("RoleBean", _table);
            PostInit();
            _table.Resolve(_tables);
            PostResolve();
            return _table as ITable<TBean, TKey>;
        }
        if(_type == typeof(MenpaiBean))
        {
            var _table = new TbMenpai(loader("tbmenpai"));
            _tables.Add("MenpaiBean", _table);
            PostInit();
            _table.Resolve(_tables);
            PostResolve();
            return _table as ITable<TBean, TKey>;
        }
        throw new Exception($"Table not found for {_type}");
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}